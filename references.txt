
            shadowRoot.innerHTML = `
        <style>
            .super{
                display:flex;
                justify-content:center;
            }

            .main{
                width:350px;
                min-height:200px;
                background:lightgreen;
                border-radius:40px;
                display:flex;
                flex-direction:column;
                position:absolute;
                z-index:999;
                opacity:0;
                padding:20px;
                
                
            }

            </style>

            <div class="super">
                <div class="main" id="meaningful">
                    </div>
                </div>
        `;
      

            getWordMeaning = async (word) => {
        this.shadowRoot.getElementById("meaningful").innerHTML =
          "<h6>Loading</h6>";
        fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)
          .then((response) => {
            return response.json();
          })
          .then((data) => {
            console.log(data);

            this.shadowRoot.getElementById("meaningful").innerHTML = `
              <b id="word">${data[0]?.word || ""}</b>
              <i id="pronounce">${data[0]?.phonetic || ""}</i>
              <p id="meaning">${
                data[0]?.meanings[0]?.definitions[0]?.definition ||
                "No Definition Available"
              }</p>
                `;
          })
          .catch(() => {
            // handle error
          });
      };



      handleSlectionChange = (event) => {
        const selection = window.getSelection();

        // get the selected word
        const selectedWord = selection?.focusNode?.textContent?.slice(
          selection.anchorOffset,
          selection.focusOffset
        );

        const shadowElement = this.shadowRoot.getElementById("meaningful");
        // show the banner if word is selected and handle visibility

        if (selectedWord?.length) {
          // get the rects of the selected word
          this.getWordMeaning(selectedWord);
          const selectionRect = selection.getRangeAt(0).getBoundingClientRect();

          shadowElement.style.visibility = "visible";
          shadowElement.style.opacity = "1";
          shadowElement.style.top = `${
            selectionRect.top + window.scrollY + 30
          }px`;

          if (selectionRect.right < window.outerWidth - 300)
            shadowEle.style.left = `${selectionRect.left}px`;
        } else {
          shadowElement.style.visibility = "hidden";
          shadowElement.style.opacity = "0";
        }
      };
